---
/**
 * Homepage - CV Website
 *
 * Main page displaying CV content with all sections
 */

import CVLayout from '../layouts/CVLayout.astro';
import Hero from '../components/Sections/Hero.astro';
import Skills from '../components/Sections/Skills.astro';
import Experience from '../components/Sections/Experience.astro';
import Contact from '../components/Sections/Contact.astro';
---

<CVLayout>
  <!-- All sections visible and scrollable on both mobile and desktop -->

  <!-- Home Section -->
  <section id="home" data-page-section="home" class="page-section">
    <div class="section-content">
      <Hero />
    </div>
  </section>

  <!-- Skills Section -->
  <section id="skills" data-page-section="skills" class="page-section">
    <div class="section-content">
      <Skills />
    </div>
  </section>

  <!-- Experience Section -->
  <section id="experience" data-page-section="experience" class="page-section">
    <div class="section-content">
      <Experience />
    </div>
  </section>
</CVLayout>

<style>
  /* Scroll-based sections for both mobile and desktop */
  .page-section {
    min-height: 100vh;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    position: relative;
    scroll-snap-align: start;
    scroll-snap-stop: always;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .page-section.in-view {
    opacity: 1;
    transform: translateY(0);
  }

  .section-content {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 100px 20px 60px;
    position: relative;
    z-index: 2;
    animation: fadeIn 0.8s ease-out forwards;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.98);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Home section - Full viewport and initially visible */
  [data-page-section="home"] {
    min-height: 100vh;
    opacity: 1;
    transform: translateY(0);
  }

  /* Skills section with overlay */
  [data-page-section="skills"] {
    position: relative;
    min-height: 100vh;
  }

  [data-page-section="skills"]::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    pointer-events: none;
  }

  /* Experience section */
  [data-page-section="experience"] {
    min-height: 100vh;
  }

  /* Desktop adjustments */
  @media (min-width: 768px) {
    .section-content {
      padding: 0 40px 80px;
      max-width: 1437px;
      margin: 0 auto;
    }

    .page-section {
      min-height: 800px; /* Minimum pixel height for desktop */
    }
  }

  /* Mobile adjustments */
  @media (max-width: 767px) {
    .page-section {
      min-height: 600px; /* Minimum pixel height for mobile */
    }

    .section-content {
      padding: 80px 20px 60px;
    }
  }

  /* Print styles */
  @media print {
    .page-section {
      height: auto;
      min-height: auto;
      page-break-inside: avoid;
    }
  }
</style>

<script>
  // Smooth scroll behavior and scroll animations
  document.addEventListener('DOMContentLoaded', () => {
    // Enable smooth scrolling
    document.documentElement.style.scrollBehavior = 'smooth';

    // Track current active section
    let currentSection = 'home';

    // Intersection Observer for scroll animations and hash updates
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -60% 0px', // Trigger when section is 20% from top
      threshold: 0
    };

    const sections = document.querySelectorAll('.page-section');

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // Add animation class when section comes into view
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');

          const sectionId = entry.target.id;

          // Update hash in URL
          if (sectionId && history.pushState) {
            history.replaceState(null, '', `#${sectionId}`);
          }

          // Notify background component about section change
          if (sectionId && sectionId !== currentSection) {
            currentSection = sectionId;
            window.postMessage({
              type: 'section-change',
              section: sectionId
            }, '*');
            console.log(`Section changed to: ${sectionId}, hash updated to #${sectionId}`);
          }
        }
      });
    }, observerOptions);

    sections.forEach(section => observer.observe(section));

    // Handle initial hash from URL
    const initialHash = window.location.hash.substring(1);
    if (initialHash && ['home', 'skills', 'experience'].includes(initialHash)) {
      currentSection = initialHash;
      setTimeout(() => {
        window.postMessage({
          type: 'section-change',
          section: initialHash
        }, '*');
        console.log(`Initialized with section: ${initialHash}`);
      }, 100);
    } else {
      // Initialize with home section
      history.replaceState(null, '', '#home');
      setTimeout(() => {
        window.postMessage({
          type: 'section-change',
          section: 'home'
        }, '*');
        console.log('Initialized with section: home');
      }, 100);
    }
  });
</script>
