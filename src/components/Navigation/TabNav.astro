---
/**
 * TabNav Component
 *
 * Navigation tabs for switching between Home, Skills, and Experience sections
 * Based on Figma design specifications
 */
---

<nav class="tab-nav" id="tab-navigation">
  <div class="container">
    <ul class="nav-list">
      <li>
        <a href="#home" class="nav-tab active" data-section="home">
          Home
        </a>
      </li>
      <li>
        <a href="#skills" class="nav-tab" data-section="skills">
          Skills
        </a>
      </li>
      <li>
        <a href="#experience" class="nav-tab" data-section="experience">
          Experience
        </a>
      </li>
    </ul>
  </div>
</nav>

<style>
  /* Mobile-first: Hide tab navigation on mobile (scrolling instead) */
  .tab-nav {
    display: none;
  }

  /* Desktop styles (768px and up) */
  @media (min-width: 768px) {
    .tab-nav {
      display: block;
      position: fixed;
      top: 95px;
      left: 0;
      z-index: 100;
      background: transparent;
      padding: 0;
      width: 100%;
    }

    .nav-list {
      display: flex;
      gap: 0;
      list-style: none;
      padding: 0;
      margin: 0;
      position: relative;
    }

    /* Exact Figma positioning for desktop */
    .nav-list li:nth-child(1) {
      position: absolute;
      left: 103px;
    }

    .nav-list li:nth-child(2) {
      position: absolute;
      left: 210px;
    }

    .nav-list li:nth-child(3) {
      position: absolute;
      left: 316px;
    }

    .nav-tab {
      display: inline-block;
      text-decoration: none;
      padding: var(--space-2) 0;
      font-family: var(--font-sans);
      font-size: var(--text-xl);
      font-weight: var(--font-semibold);
      line-height: 1.2;
      color: var(--color-white);
      cursor: pointer;
      transition: all var(--transition-fast);
      position: relative;
    }

    .nav-tab::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 2px;
      background: var(--color-secondary-light);
      transform: scaleX(0);
      transform-origin: left;
      transition: transform var(--transition-base);
    }

    .nav-tab:hover {
      color: var(--color-secondary-light);
    }

    .nav-tab.active {
      color: var(--color-white);
    }

    .nav-tab.active::after {
      transform: scaleX(1);
    }
  }

  @media print {
    .tab-nav {
      display: none;
    }
  }
</style>

<script>
  // Scroll spy navigation - highlights active section based on scroll position
  document.addEventListener('DOMContentLoaded', () => {
    // Only run on desktop
    const isDesktop = window.innerWidth >= 768;
    if (!isDesktop) return;

    const navLinks = document.querySelectorAll('.nav-tab');
    const sections = document.querySelectorAll('[data-page-section]');

    // Smooth scroll to section on click
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetSection = document.getElementById(targetId || '');

        if (targetSection) {
          targetSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });

    // Update active tab based on scroll position
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -60% 0px', // Trigger when section is 20% from top
      threshold: 0
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const sectionId = entry.target.id;

          // Remove active class from all tabs
          navLinks.forEach(link => link.classList.remove('active'));

          // Add active class to corresponding tab
          const activeLink = document.querySelector(`.nav-tab[data-section="${sectionId}"]`);
          if (activeLink) {
            activeLink.classList.add('active');
          }
        }
      });
    }, observerOptions);

    // Observe all sections
    sections.forEach(section => observer.observe(section));

    // Handle initial hash in URL
    if (window.location.hash) {
      const targetSection = document.querySelector(window.location.hash);
      if (targetSection) {
        setTimeout(() => {
          targetSection.scrollIntoView({ behavior: 'smooth' });
        }, 100);
      }
    }
  });
</script>
